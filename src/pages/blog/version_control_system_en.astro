---
import Layout from "../../layouts/Layout.astro";
import Mermaid from "../../components/Mermaid.astro";
---

<Layout title="Version Control System" desc="Git and co." class="blog">
    <h1 class="text-5xl font-semibold tracking-tight surround-h1">
        Version Control System
    </h1>
    <p>Git and co.</p>

    <p class="my-8">
        <a href="/blog/version_control_system">Deutsche Version (original)</a>
    </p>

    <h2>The Origin of Git</h2>
    <p>
        Until 2005, the Linux kernel project, one of the largest open-source
        projects in the world, used a proprietary, distributed version control
        system (VCS) called <a href="https://www.bitkeeper.org/">BitKeeper</a>.
        However, the license for free use was revoked from the kernel team. This
        created an acute problem: a new VCS was needed that could meet the
        project's extreme requirements:
    </p>
    <ul>
        <li>
            Distributed: Thousands of developers worldwide had to be able to
            collaborate efficiently.
        </li>
        <li>
            Performant: Operations like branching and merging had to be
            extremely fast.
        </li>
        <li>
            Secure: The integrity of the vast code repository had to be
            guaranteed at all times.
        </li>
    </ul>
    <p>
        Since no existing solution met these criteria, Linus Torvalds, the
        initiator of Linux, took matters into his own hands.
    </p>
    <p>
        Within a few weeks, Linus Torvalds developed the core of Git. His goal
        was not to create a user-friendly system, but an extremely fast and
        robust foundation. The first version was minimalistic, consisting of
        simple command-line tools that already implemented the core principles
        of Git.
    </p>
    <p>
        Linus Torvalds' main interest remained the Linux kernel. After laying
        the foundation for Git, he handed over the project in July 2005 to Junio
        C Hamano, one of the earliest and most important contributors.
    </p>
    <p>Under Hamano's leadership, Git became what we know today.</p>
    <p>
        Git's real breakthrough with the general public came with the rise of
        code-hosting platforms, also known as "forges."
    </p>
    <p>
        These platforms extend pure version control with crucial collaboration
        features:
    </p>
    <ul>
        <li>
            GitHub (2008): Made Git accessible through a graphical interface and
            popularized the "Pull Request" workflow, which is now the standard
            for open-source collaboration.
        </li>
        <li>
            GitLab (2011): Positioned itself as a "complete DevOps platform"
            and, in addition to code hosting, offers integrated CI/CD pipelines,
            issue tracking, and more. GitLab is very popular both as a SaaS and
            as a self-hosted solution.
        </li>
        <li>
            Gitea, Bitbucket, etc.: There are many other players. Gitea is a
            popular, lightweight self-hosted alternative to GitHub.
        </li>
    </ul>

    <h2>More than just Git</h2>
    <p>Both before and after Git, there have been many other VCSs.</p>
    <ul>
        <li>
            <a href="https://subversion.apache.org/">Subversion</a> (SVN, 2000):
            A centralized VCS from the Apache Software Foundation that versions directories
            and files, developed as a successor to CVS. It is rarely used anymore.
        </li>
        <li>
            <a href="https://www.perforce.com/products/helix-core"
                >Perforce Helix Core</a
            > (1995): A commercial, centralized VCS distinguished by high performance
            in large mono-repositories and fine-grained access control. It is widely
            used for video games.
        </li>
        <li>
            <a href="https://www.mercurial-scm.org/">Mercurial</a> (2005): A distributed
            VCS written in Python, emphasizing simplicity, speed, and consistency
            of the command-line interface. It is rarely used anymore, except at Meta.
        </li>
        <li>
            <a href="https://fossil-scm.org/">Fossil</a> (2006): An integrated system
            implemented in C by D. Richard Hipp (author of SQLite) with a built-in
            bug tracker, wiki, and web interface in a single program. The entire
            repository is stored in a single SQLite database. It is rarely used,
            except for SQLite.
        </li>
        <li>
            <a href="https://pijul.org/">Pijul</a> (2014): An experimental, distributed
            VCS in Rust, based on the theory of patches, aiming for simpler merges
            and better formal correctness. It is rarely used.
        </li>
        <li>
            <a href="https://jj-vcs.github.io/jj/latest/">Jujutsu</a> (2021): A distributed,
            Git-compatible VCS in Rust, initiated by Martin von Zweigbergk (Google),
            with a focus on more intuitive history editing and advanced merge strategies.
            It is actively used in some Git repositories. However, exact user numbers
            are difficult to determine due to its Git compatibility.
        </li>
    </ul>

    <h2>Changes</h2>
    <p>
        Many believe that Git only stores the changes from one commit to the
        next. Almost no VCS does this because it is inefficient.
    </p>
    <p>
        Most VCSs store snapshots. This is a list of all files contained in a
        commit. A file in Git has a name (path), an executable flag, and
        content. Thus, all files are stored in every commit, not just those that
        have changed. Furthermore, it does not matter how much a file has
        changed; it is saved completely anew.
    </p>
    <p>
        However, there is an important optimization: it constantly happens that
        a file's content appears multiple times. If a file does not change in a
        commit, its entire content does not need to be saved a second time.
        Likewise, if two files have the same content, it only needs to be stored
        once.
    </p>
    <p>
        This can be compared to PNPM, which stores NPM packages centrally and
        references them via symlinks in the <code>node_modules</code> directory instead
        of copying them, (among other things) to save disk space.
    </p>
    <Mermaid
        diagram={`erDiagram
    COMMIT }o--o{ FILE : ""
    FILE }o--|| CONTENT : ""
    `}
    />

    <h2>Merge</h2>
    <p>
        When two commits are merged, the VCS must perform a three-way merge. In
        this process, the commit history is treated as a DAC (Directed Acyclic
        Graph). In a DAC, it is easy to find the LCA (Lowest Common Ancestor).
        This is the commit that is a parent of both commits to be merged and
        lies deepest in the DAC, meaning it is furthest from the initial commit.
    </p>
    <p>
        This sounds complicated. However, represented graphically, it looks
        quite simple:
    </p>
    <Mermaid
        diagram={`gitGraph
    commit id: "initial commit"
    commit id: "LCA"
    branch feature-1
    checkout main
    commit id: "A"
    checkout feature-1
    commit id: "B"
    checkout main
    commit id: "C"
    merge feature-1 id: "B+C merge"
   `}
    />
    <p>
        When commits B and C are to be merged, a common base is needed against
        which the changes from both commits can be compared. This common base is
        the most recent commit that is a parent of both B and C (the LCA).
    </p>
</Layout>
